// file: kraken.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.0--rc1
// source: kraken.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Kraken subscription trade entry
type KrakenTradeEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price     string  `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`                           // execution price as string
	Volume    string  `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`                         // trade volume as string
	Time      float64 `protobuf:"fixed64,3,opt,name=time,proto3" json:"time,omitempty"`                           // epoch seconds as float
	Side      int32   `protobuf:"varint,4,opt,name=side,proto3" json:"side,omitempty"`                            // 0 = buy, 1 = sell
	OrderType int32   `protobuf:"varint,5,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"` // 0 = market, 1 = limit
	Misc      string  `protobuf:"bytes,6,opt,name=misc,proto3" json:"misc,omitempty"`
}

func (x *KrakenTradeEntry) Reset() {
	*x = KrakenTradeEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kraken_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KrakenTradeEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KrakenTradeEntry) ProtoMessage() {}

func (x *KrakenTradeEntry) ProtoReflect() protoreflect.Message {
	mi := &file_kraken_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KrakenTradeEntry.ProtoReflect.Descriptor instead.
func (*KrakenTradeEntry) Descriptor() ([]byte, []int) {
	return file_kraken_proto_rawDescGZIP(), []int{0}
}

func (x *KrakenTradeEntry) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *KrakenTradeEntry) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *KrakenTradeEntry) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *KrakenTradeEntry) GetSide() int32 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *KrakenTradeEntry) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *KrakenTradeEntry) GetMisc() string {
	if x != nil {
		return x.Misc
	}
	return ""
}

// Kraken subscription message containing trades and pair
type KrakenSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelName string              `protobuf:"bytes,1,opt,name=channelName,proto3" json:"channelName,omitempty"`
	ChannelID   int32               `protobuf:"varint,2,opt,name=channelID,proto3" json:"channelID,omitempty"`
	Trades      []*KrakenTradeEntry `protobuf:"bytes,3,rep,name=trades,proto3" json:"trades,omitempty"`
	Pair        []string            `protobuf:"bytes,4,rep,name=pair,proto3" json:"pair,omitempty"` // trading pair e.g., "BTC/USD"
}

func (x *KrakenSubscription) Reset() {
	*x = KrakenSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kraken_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KrakenSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KrakenSubscription) ProtoMessage() {}

func (x *KrakenSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_kraken_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KrakenSubscription.ProtoReflect.Descriptor instead.
func (*KrakenSubscription) Descriptor() ([]byte, []int) {
	return file_kraken_proto_rawDescGZIP(), []int{1}
}

func (x *KrakenSubscription) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *KrakenSubscription) GetChannelID() int32 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *KrakenSubscription) GetTrades() []*KrakenTradeEntry {
	if x != nil {
		return x.Trades
	}
	return nil
}

func (x *KrakenSubscription) GetPair() []string {
	if x != nil {
		return x.Pair
	}
	return nil
}

// Wrapper tying raw Kraken payload to canonical model
type KrakenMarketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw       *KrakenSubscription `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	Canonical *MarketData         `protobuf:"bytes,2,opt,name=canonical,proto3" json:"canonical,omitempty"` // canonical.symbol = uppercase(remove "/" from raw.pair[0])
}

func (x *KrakenMarketData) Reset() {
	*x = KrakenMarketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kraken_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KrakenMarketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KrakenMarketData) ProtoMessage() {}

func (x *KrakenMarketData) ProtoReflect() protoreflect.Message {
	mi := &file_kraken_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KrakenMarketData.ProtoReflect.Descriptor instead.
func (*KrakenMarketData) Descriptor() ([]byte, []int) {
	return file_kraken_proto_rawDescGZIP(), []int{2}
}

func (x *KrakenMarketData) GetRaw() *KrakenSubscription {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *KrakenMarketData) GetCanonical() *MarketData {
	if x != nil {
		return x.Canonical
	}
	return nil
}

var File_kraken_proto protoreflect.FileDescriptor

var file_kraken_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6b, 0x72, 0x61, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6b, 0x72, 0x61, 0x6b, 0x65, 0x6e, 0x1a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x4b, 0x72, 0x61, 0x6b, 0x65, 0x6e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x69, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x73,
	0x63, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x4b, 0x72, 0x61, 0x6b, 0x65, 0x6e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x72, 0x61, 0x6b, 0x65,
	0x6e, 0x2e, 0x4b, 0x72, 0x61, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x69, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x22, 0x72,
	0x0a, 0x10, 0x4b, 0x72, 0x61, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2c, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6b, 0x72, 0x61, 0x6b, 0x65, 0x6e, 0x2e, 0x4b, 0x72, 0x61, 0x6b, 0x65, 0x6e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x72, 0x61, 0x77,
	0x12, 0x30, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x42, 0x0e, 0x5a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x3b, 0x6b, 0x72, 0x61, 0x6b,
	0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kraken_proto_rawDescOnce sync.Once
	file_kraken_proto_rawDescData = file_kraken_proto_rawDesc
)

func file_kraken_proto_rawDescGZIP() []byte {
	file_kraken_proto_rawDescOnce.Do(func() {
		file_kraken_proto_rawDescData = protoimpl.X.CompressGZIP(file_kraken_proto_rawDescData)
	})
	return file_kraken_proto_rawDescData
}

var file_kraken_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_kraken_proto_goTypes = []interface{}{
	(*KrakenTradeEntry)(nil),   // 0: kraken.KrakenTradeEntry
	(*KrakenSubscription)(nil), // 1: kraken.KrakenSubscription
	(*KrakenMarketData)(nil),   // 2: kraken.KrakenMarketData
	(*MarketData)(nil),         // 3: market.MarketData
}
var file_kraken_proto_depIdxs = []int32{
	0, // 0: kraken.KrakenSubscription.trades:type_name -> kraken.KrakenTradeEntry
	1, // 1: kraken.KrakenMarketData.raw:type_name -> kraken.KrakenSubscription
	3, // 2: kraken.KrakenMarketData.canonical:type_name -> market.MarketData
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_kraken_proto_init() }
func file_kraken_proto_init() {
	if File_kraken_proto != nil {
		return
	}
	file_trade_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kraken_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KrakenTradeEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kraken_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KrakenSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kraken_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KrakenMarketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kraken_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kraken_proto_goTypes,
		DependencyIndexes: file_kraken_proto_depIdxs,
		MessageInfos:      file_kraken_proto_msgTypes,
	}.Build()
	File_kraken_proto = out.File
	file_kraken_proto_rawDesc = nil
	file_kraken_proto_goTypes = nil
	file_kraken_proto_depIdxs = nil
}
